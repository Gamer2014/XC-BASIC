------- FILE plazma.asm LEVEL 1 PASS 3
      1 U105f					      PROCESSOR	6502
      2 U105f ????
      3 U105f ????				      INCDIR	"/home/neils/Workspace/XC-BASIC/examples/plazma/."
      4  1012 ????				      SEG	UPSTART
      5  0801					      ORG	$0801
      6  0801		       0b 08		      DC.W	next_line
      7  0803		       e2 07		      DC.W	2018
      8  0805		       9e		      HEX	9e
      9  0806					      IF	prg_start
     10  0806		       32 38 38 34	      DC.B	[prg_start]d
     11  080a					      ENDIF
     12  080a		       00		      HEX	00
     13  080b				   next_line
     14  080b		       00 00		      HEX	00 00
     15  080d							;--------------------
 Memory information:
     16  080d					      ECHO	"Memory information:"
 ===================
     17  080d					      ECHO	"==================="
 BASIC loader: $801 - $80c
     18  080d					      ECHO	"BASIC loader: $801 -", *-1
     19  080d				   library_start
     20  080d
     21  080d					      PROCESSOR	6502
   2130  0985					      LIST	ON
   2131  0985					      PROCESSOR	6502
   2132  0985
   2133  0985							; [OPT_MACRO]
   2134  0985					      MAC	opt_pbyte_plbtovar
   2135  0985							; > pbyte+plb2var
   2136  0985							; > pbvar+plb2var
   2137  0985							; [/OPT_MACRO]
   2138  0985					      lda	{1}
   2139  0985					      sta	{2}
   2140  0985					      ENDM
   2141  0985
   2142  0985
   2143  0985							; [OPT_MACRO]
   2144  0985					      MAC	opt_pbyte_pbyte_add
   2145  0985							; > pbyte+pbyte+addb
   2146  0985							; > pbyte+pbvar+addb
   2147  0985							; > pbvar+pbyte+addb
   2148  0985							; > pbvar+pbvar+addb
   2149  0985							; [/OPT_MACRO]
   2150  0985					      lda	{1}
   2151  0985					      clc
   2152  0985					      adc	{2}
   2153  0985					      IF	!FPUSH
   2154  0985					      pha
   2155  0985					      ENDIF
   2156  0985					      ENDM
   2157  0985
   2158  0985							; [OPT_MACRO]
   2159  0985							; pbarray_fast+pbyte+addb
   2160  0985							; pbarray_fast+pbvar+addb
   2161  0985							; [/OPT_MACRO]
   2162  0985					      MAC	opt_pbarray_fast_pbyte_addb
   2163  0985					      IF	!FPULL
   2164  0985					      pla
   2165  0985					      ENDIF
   2166  0985					      tax
   2167  0985					      lda.wx	{1}
   2168  0985					      clc
   2169  0985					      adc	{2}
   2170  0985					      IF	!FPUSH
   2171  0985					      pha
   2172  0985					      ENDIF
   2173  0985					      ENDM
   2174  0985
   2175  0985							; [OPT_MACRO]
   2176  0985							; pbyte+pbarray_fast+addb
   2177  0985							; pbvar+pbarray_fast+addb
   2178  0985							; [/OPT_MACRO]
   2179  0985					      MAC	opt_pbyte_pbarray_fast_subb
   2180  0985					      IF	!FPULL
   2181  0985					      pla
   2182  0985					      ENDIF
   2183  0985					      tax
   2184  0985					      lda.wx	{1}
   2185  0985					      sec
   2186  0985					      sbc	{2}
   2187  0985					      IF	!FPUSH
   2188  0985					      pha
   2189  0985					      ENDIF
   2190  0985					      ENDM
   2191  0985
   2192  0985					      MAC	opt_pbyte_pbyte_cmpblt
   2193  0985					      lda	{1}
   2194  0985					      cmp	{2}
   2195  0985					      bcs	.false
   2196  0985					      pone
   2197  0985					      IF	!FPUSH
   2198  0985					      jmp	*+6
   2199  0985					      ELSE
   2200  0985					      jmp	*+5
   2201  0985					      ENDIF
   2202  0985				   .false
   2203  0985					      pzero
   2204  0985					      ENDM
   2205  0985
   2206  0985					      MAC	opt_pbyte_pbyte_cmpblte
   2207  0985					      lda	{1}
   2208  0985					      cmp	{2}
   2209  0985					      bcs	.false
   2210  0985					      pone
   2211  0985					      IF	!FPUSH
   2212  0985					      jmp	*+6
   2213  0985					      ELSE
   2214  0985					      jmp	*+5
   2215  0985					      ENDIF
   2216  0985				   .false
   2217  0985					      pzero
   2218  0985					      ENDM
   2219  0985
   2220  0985					      MAC	opt_pword_pword_addw
   2221  0985					      lda	#<{1}
   2222  0985					      clc
   2223  0985					      adc	#<{2}
   2224  0985					      pha
   2225  0985					      lda	#>{1}
   2226  0985					      adc	#>{2}
   2227  0985					      IF	!FPUSH
   2228  0985					      pha
   2229  0985					      ELSE
   2230  0985					      tay
   2231  0985					      pla
   2232  0985					      ENDIF
   2233  0985					      ENDM
   2234  0985
   2235  0985					      MAC	opt_pword_pword_subw
   2236  0985					      lda	#<{1}
   2237  0985					      sec
   2238  0985					      sbc	#<{2}
   2239  0985					      pha
   2240  0985					      lda	#>{1}
   2241  0985					      sbc	#>{2}
   2242  0985					      IF	!FPUSH
   2243  0985					      pha
   2244  0985					      ELSE
   2245  0985					      tay
   2246  0985					      pla
   2247  0985					      ENDIF
   2248  0985					      ENDM
   2249  0985		       e7 16	   KERNAL_PRINTCHR EQU	$e716
   2250  0985		       ff e4	   KERNAL_GETIN EQU	$ffe4
   2251  0985
   2557  0ade					      LIST	ON
   2558  0ade					      PROCESSOR	6502
   2559  0ade
   2560  0ade							; Fills memory area
   2561  0ade							;
   2562  0ade							; derived from Practical Memory Move Routines
   2563  0ade							; by Bruce Clark
   2564  0ade							;
   2565  0ade							; R0: destination address
   2566  0ade							; A: fill byte
   2567  0ade							; R2: number of bytes to copy
   2568  0ade
   2569  0ade				   mem_memset SUBROUTINE
   2570  0ade		       00 fb	   .dst       EQU	R0
   2571  0ade		       00 fd	   .siz       EQU	R2
   2572  0ade		       a0 00		      ldy	#0
   2573  0ae0		       a6 fe		      ldx	.siz+1
   2574  0ae2		       f0 0a		      beq	.md2
   2575  0ae4				   .md1
   2576  0ae4		       91 fb		      sta	(.dst),Y
   2577  0ae6		       c8		      iny
   2578  0ae7		       d0 fb		      bne	.md1
   2579  0ae9		       e6 fc		      inc	.dst+1
   2580  0aeb		       ca		      dex
   2581  0aec		       d0 f6		      bne	.md1
   2582  0aee		       a6 fd	   .md2       ldx	.siz
   2583  0af0		       f0 06		      beq	.md4
   2584  0af2				   .md3
   2585  0af2		       91 fb		      sta	(.dst),Y
   2586  0af4		       c8		      iny
   2587  0af5		       ca		      dex
   2588  0af6		       d0 fa		      bne	.md3
   2589  0af8		       60	   .md4       rts
   2590  0af9
   2591  0af9					      MAC	memset
   2592  0af9					      IF	!FPULL
   2593  0af9					      pla
   2594  0af9					      sta	R1
   2595  0af9					      pla
   2596  0af9					      sta	R0
   2597  0af9					      ELSE
   2598  0af9					      sta	R0
   2599  0af9					      sty	R1
   2600  0af9					      ENDIF
   2601  0af9					      pla
   2602  0af9					      sta	R3
   2603  0af9					      pla
   2604  0af9					      sta	R2
   2605  0af9					      pla
   2606  0af9					      jsr	mem_memset
   2607  0af9					      ENDM
   2608  0af9
   2609  0af9							; Copies memory area downwards
   2610  0af9							; from Practical Memory Move Routines
   2611  0af9							; by Bruce Clark
   2612  0af9							;
   2613  0af9							; R0: source address
   2614  0af9							; R2: destination address
   2615  0af9							; R4: number of bytes to copy
   2616  0af9							;
   2617  0af9							; overlapping safe downwards only
   2618  0af9
   2619  0af9				   mem_memcpy SUBROUTINE
   2620  0af9		       00 fb	   .src       EQU	R0
   2621  0af9		       00 fd	   .dst       EQU	R2
   2622  0af9		       00 3f	   .siz       EQU	R4
   2623  0af9		       a0 00		      ldy	#0
   2624  0afb		       a6 40		      ldx	.siz+1
   2625  0afd		       f0 0e		      beq	.md2
   2626  0aff		       b1 fb	   .md1       lda	(.src),Y
   2627  0b01		       91 fd		      sta	(.dst),Y
   2628  0b03		       c8		      iny
   2629  0b04		       d0 f9		      bne	.md1
   2630  0b06		       e6 fc		      inc	.src+1
   2631  0b08		       e6 fe		      inc	.dst+1
   2632  0b0a		       ca		      dex
   2633  0b0b		       d0 f2		      bne	.md1
   2634  0b0d		       a6 3f	   .md2       ldx	.siz
   2635  0b0f		       f0 08		      beq	.md4
   2636  0b11		       b1 fb	   .md3       lda	(.src),Y
   2637  0b13		       91 fd		      sta	(.dst),Y
   2638  0b15		       c8		      iny
   2639  0b16		       ca		      dex
   2640  0b17		       d0 f8		      bne	.md3
   2641  0b19		       60	   .md4       rts
   2642  0b1a
   2643  0b1a					      MAC	memcpy
   2644  0b1a					      IF	!FPULL
   2645  0b1a					      pla
   2646  0b1a					      sta	R1
   2647  0b1a					      pla
   2648  0b1a					      sta	R0
   2649  0b1a					      ELSE
   2650  0b1a					      sta	R0
   2651  0b1a					      sty	R1
   2652  0b1a					      ENDIF
   2653  0b1a					      pla
   2654  0b1a					      sta	R3
   2655  0b1a					      pla
   2656  0b1a					      sta	R2
   2657  0b1a					      pla
   2658  0b1a					      sta	R5
   2659  0b1a					      pla
   2660  0b1a					      sta	R4
   2661  0b1a					      jsr	mem_memcpy
   2662  0b1a					      ENDM
   2663  0b1a
   2664  0b1a							; Copies memory area upwards
   2665  0b1a							;
   2666  0b1a							; from Practical Memory Move Routines
   2667  0b1a							; by Bruce Clark
   2668  0b1a							;
   2669  0b1a							; FROM = source start address
   2670  0b1a							; TO = destination start address
   2671  0b1a							; SIZE = number of bytes to move
   2672  0b1a
   2673  0b1a				   mem_memshift SUBROUTINE
   2674  0b1a		       00 fb	   .FROM      EQU	R0
   2675  0b1a		       00 fd	   .TO	      EQU	R2
   2676  0b1a		       00 3f	   .SIZE      EQU	R4
   2677  0b1a
   2678  0b1a		       a6 40		      ldx	.SIZE+1
   2679  0b1c		       18		      clc		; start at the final pages of FROM and TO
   2680  0b1d		       8a		      txa
   2681  0b1e		       65 fc		      adc	.FROM+1
   2682  0b20		       85 fc		      sta	.FROM+1
   2683  0b22		       18		      clc
   2684  0b23		       8a		      txa
   2685  0b24		       65 fe		      adc	.TO+1
   2686  0b26		       85 fe		      sta	.TO+1
   2687  0b28		       e8		      inx
   2688  0b29		       a4 3f		      ldy	.SIZE
   2689  0b2b		       f0 0e		      beq	.mu3
   2690  0b2d		       88		      dey
   2691  0b2e		       f0 07		      beq	.mu2
   2692  0b30				   .mu1
   2693  0b30		       b1 fb		      lda	(.FROM),y
   2694  0b32		       91 fd		      sta	(.TO),y
   2695  0b34		       88		      dey
   2696  0b35		       d0 f9		      bne	.mu1
   2697  0b37				   .mu2
   2698  0b37		       b1 fb		      lda	(.FROM),y
   2699  0b39		       91 fd		      sta	(.TO),Y
   2700  0b3b				   .mu3
   2701  0b3b		       88		      dey
   2702  0b3c		       c6 fc		      dec	.FROM+1
   2703  0b3e		       c6 fe		      dec	.TO+1
   2704  0b40		       ca		      dex
   2705  0b41		       d0 ed		      bne	.mu1
   2706  0b43		       60		      rts
   2707  0b44
   2708  0b44					      MAC	memshift
   2709  0b44					      IF	!FPULL
   2710  0b44					      pla
   2711  0b44					      sta	R1
   2712  0b44					      pla
   2713  0b44					      sta	R0
   2714  0b44					      ELSE
   2715  0b44					      sta	R0
   2716  0b44					      sty	R1
   2717  0b44					      ENDIF
   2718  0b44					      pla
   2719  0b44					      sta	R3
   2720  0b44					      pla
   2721  0b44					      sta	R2
   2722  0b44					      pla
   2723  0b44					      sta	R5
   2724  0b44					      pla
   2725  0b44					      sta	R4
   2726  0b44					      jsr	mem_memshift
   2727  0b44					      ENDM
   2728  0b44
 Library     : $80d - $b43
   2729  0b44					      ECHO	"Library     :",library_start,"-", *-1
   2730  0b44				   prg_start
   2731  0b44				   FPUSH      SET	0
   2732  0b44				   FPULL      SET	0
      0  0b44					      init_program
      1  0b44		       ba		      tsx
      2  0b45		       8e 85 09 	      stx	RESERVED_STACK_POINTER
      0  0b48					      seed_rnd
      1  0b48		       a5 a1		      lda	$a1
      2  0b4a		       8d dc 0a 	      sta	random
      3  0b4d		       a5 a2		      lda	$a2
      4  0b4f		       8d dd 0a 	      sta	random+1
      0  0b52					      basicout
      1  0b52		       a5 01		      lda	$01
      2  0b54		       29 fe		      and	#%11111110
      3  0b56		       85 01		      sta	$01
      0  0b58					      opt_pbyte_plbtovar	#0, _c1A
      1  0b58
      2  0b58
      3  0b58
      4  0b58		       a9 00		      lda	#0
      5  0b5a		       85 02		      sta	_c1A
      0  0b5c					      opt_pbyte_plbtovar	#0, _c1B
      1  0b5c
      2  0b5c
      3  0b5c
      4  0b5c		       a9 00		      lda	#0
      5  0b5e		       85 03		      sta	_c1B
      0  0b60					      opt_pbyte_plbtovar	#0, _c2A
      1  0b60
      2  0b60
      3  0b60
      4  0b60		       a9 00		      lda	#0
      5  0b62		       85 04		      sta	_c2A
      0  0b64					      opt_pbyte_plbtovar	#0, _c2B
      1  0b64
      2  0b64
      3  0b64
      4  0b64		       a9 00		      lda	#0
      5  0b66		       85 05		      sta	_c2B
   2738  0b68		       4c b2 0c 	      jmp	_Pdoplasma_end
   2739  0b6b				   _Pdoplasma
      0  0b6b					      opt_pbyte_plbtovar	_c1A, _doplasma.c1a
      1  0b6b
      2  0b6b
      3  0b6b
      4  0b6b		       a5 02		      lda	_c1A
      5  0b6d		       85 09		      sta	_doplasma.c1a
      0  0b6f					      opt_pbyte_plbtovar	_c1B, _doplasma.c1b
      1  0b6f
      2  0b6f
      3  0b6f
      4  0b6f		       a5 03		      lda	_c1B
      5  0b71		       85 0a		      sta	_doplasma.c1b
      0  0b73					      opt_pbyte_plbtovar	#0, _doplasma.i
      1  0b73
      2  0b73
      3  0b73
      4  0b73		       a9 00		      lda	#0
      5  0b75		       85 06		      sta	_doplasma.i
   2743  0b77				   _RP_1
      0  0b77					      pbvar	_doplasma.c1a
      0  0b77					      pbyte	_doplasma.c1a
      1  0b77		       a5 09		      lda	_doplasma.c1a
      2  0b79					      IF	!FPUSH
      3  0b79		       48		      pha
      4  0b7a					      ENDIF
      0  0b7a					      pbarray_fast	_sntable
      1  0b7a					      IF	!FPULL
      2  0b7a		       68		      pla
      3  0b7b					      ENDIF
      4  0b7b		       aa		      tax
      5  0b7c		       bd 05 0f 	      lda.wx	_sntable
      6  0b7f					      IF	!FPUSH
      7  0b7f		       48		      pha
      8  0b80					      ENDIF
      0  0b80					      pbvar	_doplasma.c1b
      0  0b80					      pbyte	_doplasma.c1b
      1  0b80		       a5 0a		      lda	_doplasma.c1b
      2  0b82					      IF	!FPUSH
      3  0b82		       48		      pha
      4  0b83					      ENDIF
   2747  0b83				   FPUSH      SET	1
      0  0b83					      pbarray_fast	_sntable
      1  0b83					      IF	!FPULL
      2  0b83		       68		      pla
      3  0b84					      ENDIF
      4  0b84		       aa		      tax
      5  0b85		       bd 05 0f 	      lda.wx	_sntable
      6  0b88				  -	      IF	!FPUSH
      7  0b88				  -	      pha
      8  0b88					      ENDIF
   2749  0b88				   FPULL      SET	1
   2750  0b88				   FPUSH      SET	0
      0  0b88					      addb
      1  0b88				  -	      IF	!FPULL
      2  0b88				  -	      pla
      3  0b88					      ENDIF
      4  0b88		       85 fb		      sta	R0
      5  0b8a		       68		      pla
      6  0b8b		       18		      clc
      7  0b8c		       65 fb		      adc	R0
      8  0b8e					      IF	!FPUSH
      9  0b8e		       48		      pha
     10  0b8f					      ENDIF
   2752  0b8f				   FPULL      SET	0
   2753  0b8f				   FPUSH      SET	1
      0  0b8f					      pbvar	_doplasma.i
      0  0b8f					      pbyte	_doplasma.i
      1  0b8f		       a5 06		      lda	_doplasma.i
      2  0b91				  -	      IF	!FPUSH
      3  0b91				  -	      pha
      4  0b91					      ENDIF
   2755  0b91				   FPULL      SET	1
   2756  0b91				   FPUSH      SET	0
      0  0b91					      plbarray_fast	_doplasma.ybuf
      1  0b91				  -	      IF	!FPULL
      2  0b91				  -	      pla
      3  0b91					      ENDIF
      4  0b91		       aa		      tax
      5  0b92		       68		      pla
      6  0b93		       9d 3d 10 	      sta.wx	_doplasma.ybuf
      0  0b96					      incb	_doplasma.c1a
      1  0b96		       e6 09		      inc	_doplasma.c1a
      0  0b98					      incb	_doplasma.c1a
      1  0b98		       e6 09		      inc	_doplasma.c1a
      0  0b9a					      incb	_doplasma.c1a
      1  0b9a		       e6 09		      inc	_doplasma.c1a
      0  0b9c					      incb	_doplasma.c1a
      1  0b9c		       e6 09		      inc	_doplasma.c1a
      0  0b9e					      opt_pbyte_pbyte_add	_doplasma.c1b, #9
      1  0b9e
      2  0b9e
      3  0b9e
      4  0b9e
      5  0b9e
      6  0b9e		       a5 0a		      lda	_doplasma.c1b
      7  0ba0		       18		      clc
      8  0ba1		       69 09		      adc	#9
      9  0ba3					      IF	!FPUSH
     10  0ba3		       48		      pha
     11  0ba4					      ENDIF
   2763  0ba4				   FPULL      SET	0
      0  0ba4					      plb2var	_doplasma.c1b
      1  0ba4					      IF	!FPULL
      2  0ba4		       68		      pla
      3  0ba5					      ENDIF
      4  0ba5		       85 0a		      sta	_doplasma.c1b
      0  0ba7					      incb	_doplasma.i
      1  0ba7		       e6 06		      inc	_doplasma.i
      0  0ba9					      pbvar	_doplasma.i
      0  0ba9					      pbyte	_doplasma.i
      1  0ba9		       a5 06		      lda	_doplasma.i
      2  0bab					      IF	!FPUSH
      3  0bab		       48		      pha
      4  0bac					      ENDIF
   2767  0bac				   FPUSH      SET	1
      0  0bac					      pbyte	#25
      1  0bac		       a9 19		      lda	#25
      2  0bae				  -	      IF	!FPUSH
      3  0bae				  -	      pha
      4  0bae					      ENDIF
   2769  0bae				   FPULL      SET	1
   2770  0bae				   FPUSH      SET	0
      0  0bae					      cmpbeq
      1  0bae				  -	      IF	!FPULL
      2  0bae				  -	      pla
      3  0bae					      ENDIF
      4  0bae		       85 fc		      sta	R1
      5  0bb0		       68		      pla
      6  0bb1		       c5 fc		      cmp	R1
      7  0bb3		       f0 06		      beq	.pht
      0  0bb5					      pzero
      1  0bb5		       a9 00		      lda	#$00
      2  0bb7					      IF	!FPUSH
      3  0bb7		       48		      pha
      4  0bb8					      ENDIF
      9  0bb8					      IF	!FPUSH
     10  0bb8		       4c be 0b 	      jmp	*+6
     11  0bbb				  -	      ELSE
     12  0bbb				  -	      jmp	*+5
     13  0bbb					      ENDIF
      0  0bbb				   .pht       pone
      1  0bbb		       a9 01		      lda	#$01
      2  0bbd					      IF	!FPUSH
      3  0bbd		       48		      pha
      4  0bbe					      ENDIF
      0  0bbe					      until	1
      1  0bbe		       68		      pla
      2  0bbf		       d0 03		      bne	*+5
      3  0bc1		       4c 77 0b 	      jmp	_RP_1
      0  0bc4					      incb	_c1A
      1  0bc4		       e6 02		      inc	_c1A
      0  0bc6					      incb	_c1A
      1  0bc6		       e6 02		      inc	_c1A
      0  0bc8					      incb	_c1A
      1  0bc8		       e6 02		      inc	_c1A
      0  0bca					      decb	_c1B
      1  0bca		       c6 03		      dec	_c1B
      0  0bcc					      decb	_c1B
      1  0bcc		       c6 03		      dec	_c1B
      0  0bce					      decb	_c1B
      1  0bce		       c6 03		      dec	_c1B
      0  0bd0					      decb	_c1B
      1  0bd0		       c6 03		      dec	_c1B
      0  0bd2					      decb	_c1B
      1  0bd2		       c6 03		      dec	_c1B
      0  0bd4					      opt_pbyte_plbtovar	_c2A, _doplasma.c2a
      1  0bd4
      2  0bd4
      3  0bd4
      4  0bd4		       a5 04		      lda	_c2A
      5  0bd6		       85 0b		      sta	_doplasma.c2a
      0  0bd8					      opt_pbyte_plbtovar	_c2B, _doplasma.c2b
      1  0bd8
      2  0bd8
      3  0bd8
      4  0bd8		       a5 05		      lda	_c2B
      5  0bda		       85 0c		      sta	_doplasma.c2b
      0  0bdc					      opt_pbyte_plbtovar	#0, _doplasma.i
      1  0bdc
      2  0bdc
      3  0bdc
      4  0bdc		       a9 00		      lda	#0
      5  0bde		       85 06		      sta	_doplasma.i
   2784  0be0				   _RP_2
   2785  0be0				   FPULL      SET	0
      0  0be0					      pbvar	_doplasma.c2a
      0  0be0					      pbyte	_doplasma.c2a
      1  0be0		       a5 0b		      lda	_doplasma.c2a
      2  0be2					      IF	!FPUSH
      3  0be2		       48		      pha
      4  0be3					      ENDIF
      0  0be3					      pbarray_fast	_sntable
      1  0be3					      IF	!FPULL
      2  0be3		       68		      pla
      3  0be4					      ENDIF
      4  0be4		       aa		      tax
      5  0be5		       bd 05 0f 	      lda.wx	_sntable
      6  0be8					      IF	!FPUSH
      7  0be8		       48		      pha
      8  0be9					      ENDIF
      0  0be9					      pbvar	_doplasma.c2b
      0  0be9					      pbyte	_doplasma.c2b
      1  0be9		       a5 0c		      lda	_doplasma.c2b
      2  0beb					      IF	!FPUSH
      3  0beb		       48		      pha
      4  0bec					      ENDIF
   2789  0bec				   FPUSH      SET	1
      0  0bec					      pbarray_fast	_sntable
      1  0bec					      IF	!FPULL
      2  0bec		       68		      pla
      3  0bed					      ENDIF
      4  0bed		       aa		      tax
      5  0bee		       bd 05 0f 	      lda.wx	_sntable
      6  0bf1				  -	      IF	!FPUSH
      7  0bf1				  -	      pha
      8  0bf1					      ENDIF
   2791  0bf1				   FPULL      SET	1
   2792  0bf1				   FPUSH      SET	0
      0  0bf1					      addb
      1  0bf1				  -	      IF	!FPULL
      2  0bf1				  -	      pla
      3  0bf1					      ENDIF
      4  0bf1		       85 fb		      sta	R0
      5  0bf3		       68		      pla
      6  0bf4		       18		      clc
      7  0bf5		       65 fb		      adc	R0
      8  0bf7					      IF	!FPUSH
      9  0bf7		       48		      pha
     10  0bf8					      ENDIF
   2794  0bf8				   FPULL      SET	0
   2795  0bf8				   FPUSH      SET	1
      0  0bf8					      pbvar	_doplasma.i
      0  0bf8					      pbyte	_doplasma.i
      1  0bf8		       a5 06		      lda	_doplasma.i
      2  0bfa				  -	      IF	!FPUSH
      3  0bfa				  -	      pha
      4  0bfa					      ENDIF
   2797  0bfa				   FPULL      SET	1
   2798  0bfa				   FPUSH      SET	0
      0  0bfa					      plbarray_fast	_doplasma.xbuf
      1  0bfa				  -	      IF	!FPULL
      2  0bfa				  -	      pla
      3  0bfa					      ENDIF
      4  0bfa		       aa		      tax
      5  0bfb		       68		      pla
      6  0bfc		       9d 15 10 	      sta.wx	_doplasma.xbuf
      0  0bff					      incb	_doplasma.c2a
      1  0bff		       e6 0b		      inc	_doplasma.c2a
      0  0c01					      incb	_doplasma.c2a
      1  0c01		       e6 0b		      inc	_doplasma.c2a
      0  0c03					      incb	_doplasma.c2a
      1  0c03		       e6 0b		      inc	_doplasma.c2a
      0  0c05					      opt_pbyte_pbyte_add	_doplasma.c2b, #7
      1  0c05
      2  0c05
      3  0c05
      4  0c05
      5  0c05
      6  0c05		       a5 0c		      lda	_doplasma.c2b
      7  0c07		       18		      clc
      8  0c08		       69 07		      adc	#7
      9  0c0a					      IF	!FPUSH
     10  0c0a		       48		      pha
     11  0c0b					      ENDIF
   2804  0c0b				   FPULL      SET	0
      0  0c0b					      plb2var	_doplasma.c2b
      1  0c0b					      IF	!FPULL
      2  0c0b		       68		      pla
      3  0c0c					      ENDIF
      4  0c0c		       85 0c		      sta	_doplasma.c2b
      0  0c0e					      incb	_doplasma.i
      1  0c0e		       e6 06		      inc	_doplasma.i
      0  0c10					      pbvar	_doplasma.i
      0  0c10					      pbyte	_doplasma.i
      1  0c10		       a5 06		      lda	_doplasma.i
      2  0c12					      IF	!FPUSH
      3  0c12		       48		      pha
      4  0c13					      ENDIF
   2808  0c13				   FPUSH      SET	1
      0  0c13					      pbyte	#40
      1  0c13		       a9 28		      lda	#40
      2  0c15				  -	      IF	!FPUSH
      3  0c15				  -	      pha
      4  0c15					      ENDIF
   2810  0c15				   FPULL      SET	1
   2811  0c15				   FPUSH      SET	0
      0  0c15					      cmpbeq
      1  0c15				  -	      IF	!FPULL
      2  0c15				  -	      pla
      3  0c15					      ENDIF
      4  0c15		       85 fc		      sta	R1
      5  0c17		       68		      pla
      6  0c18		       c5 fc		      cmp	R1
      7  0c1a		       f0 06		      beq	.pht
      0  0c1c					      pzero
      1  0c1c		       a9 00		      lda	#$00
      2  0c1e					      IF	!FPUSH
      3  0c1e		       48		      pha
      4  0c1f					      ENDIF
      9  0c1f					      IF	!FPUSH
     10  0c1f		       4c 25 0c 	      jmp	*+6
     11  0c22				  -	      ELSE
     12  0c22				  -	      jmp	*+5
     13  0c22					      ENDIF
      0  0c22				   .pht       pone
      1  0c22		       a9 01		      lda	#$01
      2  0c24					      IF	!FPUSH
      3  0c24		       48		      pha
      4  0c25					      ENDIF
      0  0c25					      until	2
      1  0c25		       68		      pla
      2  0c26		       d0 03		      bne	*+5
      3  0c28		       4c e0 0b 	      jmp	_RP_2
      0  0c2b					      incb	_c2A
      1  0c2b		       e6 04		      inc	_c2A
      0  0c2d					      incb	_c2A
      1  0c2d		       e6 04		      inc	_c2A
      0  0c2f					      decb	_c2B
      1  0c2f		       c6 05		      dec	_c2B
      0  0c31					      decb	_c2B
      1  0c31		       c6 05		      dec	_c2B
   2818  0c31				   FPULL      SET	0
   2819  0c31				   FPUSH      SET	1
      0  0c33					      pwvar	_doplasma.screen
      1  0c33				  -	      IF	!FPUSH
      2  0c33				  -	      lda.w	_doplasma.screen
      3  0c33				  -	      pha
      4  0c33				  -	      lda.w	_doplasma.screen+1
      5  0c33				  -	      pha
      6  0c33					      ELSE
      7  0c33		       ad 13 10 	      lda.w	_doplasma.screen
      8  0c36		       ac 14 10 	      ldy.w	_doplasma.screen+1
      9  0c39					      ENDIF
   2821  0c39				   FPULL      SET	1
   2822  0c39				   FPUSH      SET	0
      0  0c39					      plw2var	_doplasma.cursor
      1  0c39				  -	      IF	!FPULL
      2  0c39				  -	      pla
      3  0c39				  -	      sta	_doplasma.cursor+1
      4  0c39				  -	      pla
      5  0c39				  -	      sta	_doplasma.cursor
      6  0c39					      ELSE
      7  0c39		       8d 56 10 	      sta	_doplasma.cursor
      8  0c3c		       8c 57 10 	      sty	_doplasma.cursor+1
      9  0c3f					      ENDIF
      0  0c3f					      opt_pbyte_plbtovar	#0, _doplasma.y
      1  0c3f
      2  0c3f
      3  0c3f
      4  0c3f		       a9 00		      lda	#0
      5  0c41		       85 08		      sta	_doplasma.y
   2825  0c43				   _RP_3
      0  0c43					      opt_pbyte_plbtovar	#0, _doplasma.x
      1  0c43
      2  0c43
      3  0c43
      4  0c43		       a9 00		      lda	#0
      5  0c45		       85 07		      sta	_doplasma.x
   2827  0c47				   _RP_4
   2828  0c47				   FPULL      SET	0
      0  0c47					      pbvar	_doplasma.x
      0  0c47					      pbyte	_doplasma.x
      1  0c47		       a5 07		      lda	_doplasma.x
      2  0c49					      IF	!FPUSH
      3  0c49		       48		      pha
      4  0c4a					      ENDIF
      0  0c4a					      pbarray_fast	_doplasma.xbuf
      1  0c4a					      IF	!FPULL
      2  0c4a		       68		      pla
      3  0c4b					      ENDIF
      4  0c4b		       aa		      tax
      5  0c4c		       bd 15 10 	      lda.wx	_doplasma.xbuf
      6  0c4f					      IF	!FPUSH
      7  0c4f		       48		      pha
      8  0c50					      ENDIF
      0  0c50					      pbvar	_doplasma.y
      0  0c50					      pbyte	_doplasma.y
      1  0c50		       a5 08		      lda	_doplasma.y
      2  0c52					      IF	!FPUSH
      3  0c52		       48		      pha
      4  0c53					      ENDIF
   2832  0c53				   FPUSH      SET	1
      0  0c53					      pbarray_fast	_doplasma.ybuf
      1  0c53					      IF	!FPULL
      2  0c53		       68		      pla
      3  0c54					      ENDIF
      4  0c54		       aa		      tax
      5  0c55		       bd 3d 10 	      lda.wx	_doplasma.ybuf
      6  0c58				  -	      IF	!FPUSH
      7  0c58				  -	      pha
      8  0c58					      ENDIF
   2834  0c58				   FPULL      SET	1
   2835  0c58				   FPUSH      SET	0
      0  0c58					      addb
      1  0c58				  -	      IF	!FPULL
      2  0c58				  -	      pla
      3  0c58					      ENDIF
      4  0c58		       85 fb		      sta	R0
      5  0c5a		       68		      pla
      6  0c5b		       18		      clc
      7  0c5c		       65 fb		      adc	R0
      8  0c5e					      IF	!FPUSH
      9  0c5e		       48		      pha
     10  0c5f					      ENDIF
   2837  0c5f				   FPULL      SET	0
   2838  0c5f				   FPUSH      SET	1
      0  0c5f					      pwvar	_doplasma.cursor
      1  0c5f				  -	      IF	!FPUSH
      2  0c5f				  -	      lda.w	_doplasma.cursor
      3  0c5f				  -	      pha
      4  0c5f				  -	      lda.w	_doplasma.cursor+1
      5  0c5f				  -	      pha
      6  0c5f					      ELSE
      7  0c5f		       ad 56 10 	      lda.w	_doplasma.cursor
      8  0c62		       ac 57 10 	      ldy.w	_doplasma.cursor+1
      9  0c65					      ENDIF
   2840  0c65				   FPULL      SET	1
   2841  0c65				   FPUSH      SET	0
      0  0c65					      pokeb
      1  0c65				  -	      IF	!FPULL
      2  0c65				  -	      pla
      3  0c65				  -	      sta	.selfmod_code+2
      4  0c65				  -	      pla
      5  0c65				  -	      sta	.selfmod_code+1
      6  0c65					      ELSE
      7  0c65		       8d 6d 0c 	      sta	.selfmod_code+1
      8  0c68		       8c 6e 0c 	      sty	.selfmod_code+2
      9  0c6b					      ENDIF
     10  0c6b		       68		      pla
     11  0c6c				   .selfmod_code
     12  0c6c		       8d 00 00 	      sta.w	$0000
      0  0c6f					      incb	_doplasma.x
      1  0c6f		       e6 07		      inc	_doplasma.x
      0  0c71					      incw	_doplasma.cursor
      1  0c71		       ee 56 10 	      inc	_doplasma.cursor
      2  0c74		       d0 03		      bne	.skip
      3  0c76		       ee 57 10 	      inc	_doplasma.cursor+1
      4  0c79				   .skip
   2845  0c79				   FPULL      SET	0
      0  0c79					      pbvar	_doplasma.x
      0  0c79					      pbyte	_doplasma.x
      1  0c79		       a5 07		      lda	_doplasma.x
      2  0c7b					      IF	!FPUSH
      3  0c7b		       48		      pha
      4  0c7c					      ENDIF
   2847  0c7c				   FPUSH      SET	1
      0  0c7c					      pbyte	#40
      1  0c7c		       a9 28		      lda	#40
      2  0c7e				  -	      IF	!FPUSH
      3  0c7e				  -	      pha
      4  0c7e					      ENDIF
   2849  0c7e				   FPULL      SET	1
   2850  0c7e				   FPUSH      SET	0
      0  0c7e					      cmpbeq
      1  0c7e				  -	      IF	!FPULL
      2  0c7e				  -	      pla
      3  0c7e					      ENDIF
      4  0c7e		       85 fc		      sta	R1
      5  0c80		       68		      pla
      6  0c81		       c5 fc		      cmp	R1
      7  0c83		       f0 06		      beq	.pht
      0  0c85					      pzero
      1  0c85		       a9 00		      lda	#$00
      2  0c87					      IF	!FPUSH
      3  0c87		       48		      pha
      4  0c88					      ENDIF
      9  0c88					      IF	!FPUSH
     10  0c88		       4c 8e 0c 	      jmp	*+6
     11  0c8b				  -	      ELSE
     12  0c8b				  -	      jmp	*+5
     13  0c8b					      ENDIF
      0  0c8b				   .pht       pone
      1  0c8b		       a9 01		      lda	#$01
      2  0c8d					      IF	!FPUSH
      3  0c8d		       48		      pha
      4  0c8e					      ENDIF
      0  0c8e					      until	4
      1  0c8e		       68		      pla
      2  0c8f		       d0 03		      bne	*+5
      3  0c91		       4c 47 0c 	      jmp	_RP_4
      0  0c94					      incb	_doplasma.y
      1  0c94		       e6 08		      inc	_doplasma.y
   2854  0c94				   FPULL      SET	0
      0  0c96					      pbvar	_doplasma.y
      0  0c96					      pbyte	_doplasma.y
      1  0c96		       a5 08		      lda	_doplasma.y
      2  0c98					      IF	!FPUSH
      3  0c98		       48		      pha
      4  0c99					      ENDIF
   2856  0c99				   FPUSH      SET	1
      0  0c99					      pbyte	#25
      1  0c99		       a9 19		      lda	#25
      2  0c9b				  -	      IF	!FPUSH
      3  0c9b				  -	      pha
      4  0c9b					      ENDIF
   2858  0c9b				   FPULL      SET	1
   2859  0c9b				   FPUSH      SET	0
      0  0c9b					      cmpbeq
      1  0c9b				  -	      IF	!FPULL
      2  0c9b				  -	      pla
      3  0c9b					      ENDIF
      4  0c9b		       85 fc		      sta	R1
      5  0c9d		       68		      pla
      6  0c9e		       c5 fc		      cmp	R1
      7  0ca0		       f0 06		      beq	.pht
      0  0ca2					      pzero
      1  0ca2		       a9 00		      lda	#$00
      2  0ca4					      IF	!FPUSH
      3  0ca4		       48		      pha
      4  0ca5					      ENDIF
      9  0ca5					      IF	!FPUSH
     10  0ca5		       4c ab 0c 	      jmp	*+6
     11  0ca8				  -	      ELSE
     12  0ca8				  -	      jmp	*+5
     13  0ca8					      ENDIF
      0  0ca8				   .pht       pone
      1  0ca8		       a9 01		      lda	#$01
      2  0caa					      IF	!FPUSH
      3  0caa		       48		      pha
      4  0cab					      ENDIF
      0  0cab					      until	3
      1  0cab		       68		      pla
      2  0cac		       d0 03		      bne	*+5
      3  0cae		       4c 43 0c 	      jmp	_RP_3
   2862  0cb1		       60		      rts
   2863  0cb2				   _Pdoplasma_end
   2864  0cb2		       4c 64 0e 	      jmp	_Pmakecharset_end
   2865  0cb5				   _Pmakecharset
      0  0cb5					      paddr	_S1
      0  0cb5					      pword	_S1
      1  0cb5					      IF	!FPUSH
      2  0cb5		       a9 05		      lda	#<_S1
      3  0cb7		       48		      pha
      4  0cb8		       a9 10		      lda	#>_S1
      5  0cba		       48		      pha
      6  0cbb				  -	      ELSE
      7  0cbb				  -	      lda	#<_S1
      8  0cbb				  -	      ldy	#>_S1
      9  0cbb					      ENDIF
      0  0cbb					      stdlib_putstr
      1  0cbb		       68		      pla
      2  0cbc		       a8		      tay
      3  0cbd		       68		      pla
      4  0cbe		       20 8c 09 	      jsr	STDLIB_PRINT
   2868  0cc1		       a9 0d		      lda	#13
   2869  0cc3		       20 16 e7 	      jsr	KERNAL_PRINTCHR
      0  0cc6					      paddr	_S2
      0  0cc6					      pword	_S2
      1  0cc6					      IF	!FPUSH
      2  0cc6		       a9 07		      lda	#<_S2
      3  0cc8		       48		      pha
      4  0cc9		       a9 10		      lda	#>_S2
      5  0ccb		       48		      pha
      6  0ccc				  -	      ELSE
      7  0ccc				  -	      lda	#<_S2
      8  0ccc				  -	      ldy	#>_S2
      9  0ccc					      ENDIF
   2871  0ccc				   FPULL      SET	0
      0  0ccc					      pbyte	#10
      1  0ccc		       a9 0a		      lda	#10
      2  0cce					      IF	!FPUSH
      3  0cce		       48		      pha
      4  0ccf					      ENDIF
      0  0ccf					      btow
      1  0ccf		       a9 00		      lda	#$00
      2  0cd1		       48		      pha
   2874  0cd1				   FPUSH      SET	1
      0  0cd2					      pword	#40
      1  0cd2				  -	      IF	!FPUSH
      2  0cd2				  -	      lda	#<#40
      3  0cd2				  -	      pha
      4  0cd2				  -	      lda	#>#40
      5  0cd2				  -	      pha
      6  0cd2					      ELSE
      7  0cd2		       a9 28		      lda	#<#40
      8  0cd4		       a0 00		      ldy	#>#40
      9  0cd6					      ENDIF
   2876  0cd6				   FPULL      SET	1
   2877  0cd6				   FPUSH      SET	0
      0  0cd6					      mulw
      1  0cd6				  -	      IF	!FPULL
      2  0cd6				  -	      pla
      3  0cd6				  -	      sta	R1
      4  0cd6				  -	      pla
      5  0cd6				  -	      sta	R0
      6  0cd6					      ELSE
      7  0cd6		       85 fb		      sta	R0
      8  0cd8		       84 fc		      sty	R1
      9  0cda					      ENDIF
     10  0cda		       68		      pla
     11  0cdb		       85 fe		      sta	R3
     12  0cdd		       68		      pla
     13  0cde		       85 fd		      sta	R2
     14  0ce0		       20 0d 08 	      jsr	NUCL_SMUL16
     15  0ce3					      IF	!FPUSH
     16  0ce3		       a5 fb		      lda	R0
     17  0ce5		       48		      pha
     18  0ce6		       a5 fc		      lda	R1
     19  0ce8		       48		      pha
     20  0ce9				  -	      ELSE
     21  0ce9				  -	      lda	R0
     22  0ce9				  -	      ldy	R1
     23  0ce9					      ENDIF
   2879  0ce9				   FPULL      SET	0
      0  0ce9					      pbyte	#15
      1  0ce9		       a9 0f		      lda	#15
      2  0ceb					      IF	!FPUSH
      3  0ceb		       48		      pha
      4  0cec					      ENDIF
      0  0cec					      btow
      1  0cec		       a9 00		      lda	#$00
      2  0cee		       48		      pha
      0  0cef					      addw
      1  0cef		       ba		      tsx
      2  0cf0		       bd 02 01 	      lda.wx	stack+2
      3  0cf3		       18		      clc
      4  0cf4		       7d 04 01 	      adc.wx	stack+4
      5  0cf7		       9d 04 01 	      sta.wx	stack+4
      6  0cfa		       68		      pla
      7  0cfb		       7d 03 01 	      adc.wx	stack+3
      8  0cfe		       9d 03 01 	      sta.wx	stack+3
      9  0d01		       68		      pla
      0  0d02					      pword	#1024
      1  0d02					      IF	!FPUSH
      2  0d02		       a9 00		      lda	#<#1024
      3  0d04		       48		      pha
      4  0d05		       a9 04		      lda	#>#1024
      5  0d07		       48		      pha
      6  0d08				  -	      ELSE
      7  0d08				  -	      lda	#<#1024
      8  0d08				  -	      ldy	#>#1024
      9  0d08					      ENDIF
      0  0d08					      addw
      1  0d08		       ba		      tsx
      2  0d09		       bd 02 01 	      lda.wx	stack+2
      3  0d0c		       18		      clc
      4  0d0d		       7d 04 01 	      adc.wx	stack+4
      5  0d10		       9d 04 01 	      sta.wx	stack+4
      6  0d13		       68		      pla
      7  0d14		       7d 03 01 	      adc.wx	stack+3
      8  0d17		       9d 03 01 	      sta.wx	stack+3
      9  0d1a		       68		      pla
      0  0d1b					      textat
      1  0d1b					      IF	!FPULL
      2  0d1b		       68		      pla
      3  0d1c		       85 fe		      sta	R3
      4  0d1e		       68		      pla
      5  0d1f		       85 fd		      sta	R2
      6  0d21				  -	      ELSE
      7  0d21				  -	      sta	R2
      8  0d21				  -	      sty	R3
      9  0d21					      ENDIF
     10  0d21		       68		      pla
     11  0d22		       85 fc		      sta	R1
     12  0d24		       68		      pla
     13  0d25		       85 fb		      sta	R0
     14  0d27		       a0 00		      ldy	#$00
     15  0d29				   .loop
     16  0d29		       b1 fb		      lda	(R0),y
     17  0d2b		       f0 06		      beq	.end
     18  0d2d		       91 fd		      sta	(R2),y
     19  0d2f		       c8		      iny
     20  0d30		       4c 29 0d 	      jmp	.loop
     21  0d33				   .end
      0  0d33					      opt_pbyte_plbtovar	#0, _makecharset.c
      1  0d33
      2  0d33
      3  0d33
      4  0d33		       a9 00		      lda	#0
      5  0d35		       8d 5a 10 	      sta	_makecharset.c
   2887  0d38				   _Lmakecharset.loop
      0  0d38					      pbvar	_makecharset.c
      0  0d38					      pbyte	_makecharset.c
      1  0d38		       ad 5a 10 	      lda	_makecharset.c
      2  0d3b					      IF	!FPUSH
      3  0d3b		       48		      pha
      4  0d3c					      ENDIF
   2889  0d3c				   FPUSH      SET	1
      0  0d3c					      pbarray_fast	_sntable
      1  0d3c					      IF	!FPULL
      2  0d3c		       68		      pla
      3  0d3d					      ENDIF
      4  0d3d		       aa		      tax
      5  0d3e		       bd 05 0f 	      lda.wx	_sntable
      6  0d41				  -	      IF	!FPUSH
      7  0d41				  -	      pha
      8  0d41					      ENDIF
   2891  0d41				   FPULL      SET	1
   2892  0d41				   FPUSH      SET	0
      0  0d41					      plb2var	_makecharset.s
      1  0d41				  -	      IF	!FPULL
      2  0d41				  -	      pla
      3  0d41					      ENDIF
      4  0d41		       8d 5b 10 	      sta	_makecharset.s
      0  0d44					      opt_pbyte_plbtovar	#0, _makecharset.i
      1  0d44
      2  0d44
      3  0d44
      4  0d44		       a9 00		      lda	#0
      5  0d46		       8d 5c 10 	      sta	_makecharset.i
   2895  0d46				   FPULL      SET	0
      0  0d49					      pbyte	#7
      1  0d49		       a9 07		      lda	#7
      2  0d4b					      IF	!FPUSH
      3  0d4b		       48		      pha
      4  0d4c					      ENDIF
      0  0d4c					      for
      1  0d4c
      2  0d4c
      3  0d4c				   .addr
      4  0d4c		       a9 4c		      lda	#<.addr
      5  0d4e		       48		      pha
      6  0d4f		       a9 0d		      lda	#>.addr
      7  0d51		       48		      pha
      0  0d52					      opt_pbyte_plbtovar	#0, _makecharset.b
      1  0d52
      2  0d52
      3  0d52
      4  0d52		       a9 00		      lda	#0
      5  0d54		       8d 5d 10 	      sta	_makecharset.b
      0  0d57					      opt_pbyte_plbtovar	#0, _makecharset.ii
      1  0d57
      2  0d57
      3  0d57
      4  0d57		       a9 00		      lda	#0
      5  0d59		       8d 5e 10 	      sta	_makecharset.ii
      0  0d5c					      pbyte	#7
      1  0d5c		       a9 07		      lda	#7
      2  0d5e					      IF	!FPUSH
      3  0d5e		       48		      pha
      4  0d5f					      ENDIF
      0  0d5f					      for
      1  0d5f
      2  0d5f
      3  0d5f				   .addr
      4  0d5f		       a9 5f		      lda	#<.addr
      5  0d61		       48		      pha
      6  0d62		       a9 0d		      lda	#>.addr
      7  0d64		       48		      pha
      0  0d65					      rndb
      1  0d65		       20 ad 0a 	      jsr	STDLIB_RND
      2  0d68		       ad dd 0a 	      lda	random+1
      3  0d6b					      IF	!FPUSH
      4  0d6b		       48		      pha
      5  0d6c					      ENDIF
   2903  0d6c				   FPUSH      SET	1
      0  0d6c					      pbyte	#255
      1  0d6c		       a9 ff		      lda	#255
      2  0d6e				  -	      IF	!FPUSH
      3  0d6e				  -	      pha
      4  0d6e					      ENDIF
   2905  0d6e				   FPULL      SET	1
   2906  0d6e				   FPUSH      SET	0
      0  0d6e					      andb
      1  0d6e				  -	      IF	!FPULL
      2  0d6e				  -	      pla
      3  0d6e					      ENDIF
      4  0d6e		       85 fc		      sta	R1
      5  0d70		       68		      pla
      6  0d71		       25 fc		      and	R1
      7  0d73					      IF	!FPUSH
      8  0d73		       48		      pha
      9  0d74					      ENDIF
   2908  0d74				   FPULL      SET	0
   2909  0d74				   FPUSH      SET	1
      0  0d74					      pbvar	_makecharset.s
      0  0d74					      pbyte	_makecharset.s
      1  0d74		       ad 5b 10 	      lda	_makecharset.s
      2  0d77				  -	      IF	!FPUSH
      3  0d77				  -	      pha
      4  0d77					      ENDIF
   2911  0d77				   FPULL      SET	1
   2912  0d77				   FPUSH      SET	0
      0  0d77					      cmpbgt
      1  0d77				  -	      IF	!FPULL
      2  0d77				  -	      pla
      3  0d77					      ENDIF
      4  0d77		       85 fc		      sta	R1
      5  0d79		       68		      pla
      6  0d7a		       c5 fc		      cmp	R1
      7  0d7c		       90 08		      bcc	.phf
      8  0d7e		       f0 06		      beq	.phf
      0  0d80					      pone
      1  0d80		       a9 01		      lda	#$01
      2  0d82					      IF	!FPUSH
      3  0d82		       48		      pha
      4  0d83					      ENDIF
     10  0d83					      IF	!FPUSH
     11  0d83		       4c 89 0d 	      jmp	*+6
     12  0d86				  -	      ELSE
     13  0d86				  -	      jmp	*+5
     14  0d86					      ENDIF
      0  0d86				   .phf       pzero
      1  0d86		       a9 00		      lda	#$00
      2  0d88					      IF	!FPUSH
      3  0d88		       48		      pha
      4  0d89					      ENDIF
   2914  0d89		       68		      pla
   2915  0d8a		       d0 03		      bne	*+5
   2916  0d8c		       4c a4 0d 	      jmp	_J1
   2917  0d8c				   FPULL      SET	0
      0  0d8f					      pbvar	_makecharset.b
      0  0d8f					      pbyte	_makecharset.b
      1  0d8f		       ad 5d 10 	      lda	_makecharset.b
      2  0d92					      IF	!FPUSH
      3  0d92		       48		      pha
      4  0d93					      ENDIF
      0  0d93					      pbvar	_makecharset.ii
      0  0d93					      pbyte	_makecharset.ii
      1  0d93		       ad 5e 10 	      lda	_makecharset.ii
      2  0d96					      IF	!FPUSH
      3  0d96		       48		      pha
      4  0d97					      ENDIF
   2920  0d97				   FPUSH      SET	1
      0  0d97					      pbarray_fast	_bittab
      1  0d97					      IF	!FPULL
      2  0d97		       68		      pla
      3  0d98					      ENDIF
      4  0d98		       aa		      tax
      5  0d99		       bd fd 0e 	      lda.wx	_bittab
      6  0d9c				  -	      IF	!FPUSH
      7  0d9c				  -	      pha
      8  0d9c					      ENDIF
   2922  0d9c				   FPULL      SET	1
      0  0d9c					      orb
      1  0d9c				  -	      IF	!FPULL
      2  0d9c				  -	      pla
      3  0d9c					      ENDIF
      4  0d9c		       85 fc		      sta	R1
      5  0d9e		       68		      pla
      6  0d9f		       05 fc		      ora	R1
      7  0da1				  -	      IF	!FPUSH
      8  0da1				  -	      pha
      9  0da1					      ENDIF
   2924  0da1				   FPUSH      SET	0
      0  0da1					      plb2var	_makecharset.b
      1  0da1				  -	      IF	!FPULL
      2  0da1				  -	      pla
      3  0da1					      ENDIF
      4  0da1		       8d 5d 10 	      sta	_makecharset.b
   2926  0da4				   _J1
      0  0da4					      nextb	_makecharset.ii
      1  0da4
      2  0da4		       ee 5e 10 	      inc	_makecharset.ii
      3  0da7
      4  0da7		       f0 15		      beq	.end
      5  0da9				   .skip
      6  0da9
      7  0da9		       68		      pla
      8  0daa		       8d bd 0d 	      sta	.selfmod_code+2
      9  0dad		       68		      pla
     10  0dae		       8d bc 0d 	      sta	.selfmod_code+1
     11  0db1
     12  0db1		       68		      pla
     13  0db2		       cd 5e 10 	      cmp	_makecharset.ii
     14  0db5		       b0 03		      bcs	.jump_back
     15  0db7		       4c be 0d 	      jmp	.end
     16  0dba				   .jump_back
     17  0dba
     18  0dba		       48		      pha
     19  0dbb				   .selfmod_code
     20  0dbb		       4c 00 00 	      jmp	$0000
     21  0dbe				   .end
   2928  0dbe				   FPULL      SET	0
      0  0dbe					      pbvar	_makecharset.b
      0  0dbe					      pbyte	_makecharset.b
      1  0dbe		       ad 5d 10 	      lda	_makecharset.b
      2  0dc1					      IF	!FPUSH
      3  0dc1		       48		      pha
      4  0dc2					      ENDIF
      0  0dc2					      pwvar	_makecharset.address
      1  0dc2					      IF	!FPUSH
      2  0dc2		       ad 58 10 	      lda.w	_makecharset.address
      3  0dc5		       48		      pha
      4  0dc6		       ad 59 10 	      lda.w	_makecharset.address+1
      5  0dc9		       48		      pha
      6  0dca				  -	      ELSE
      7  0dca				  -	      lda.w	_makecharset.address
      8  0dca				  -	      ldy.w	_makecharset.address+1
      9  0dca					      ENDIF
      0  0dca					      pbvar	_makecharset.c
      0  0dca					      pbyte	_makecharset.c
      1  0dca		       ad 5a 10 	      lda	_makecharset.c
      2  0dcd					      IF	!FPUSH
      3  0dcd		       48		      pha
      4  0dce					      ENDIF
      0  0dce					      btow
      1  0dce		       a9 00		      lda	#$00
      2  0dd0		       48		      pha
      0  0dd1					      pbyte	#8
      1  0dd1		       a9 08		      lda	#8
      2  0dd3					      IF	!FPUSH
      3  0dd3		       48		      pha
      4  0dd4					      ENDIF
      0  0dd4					      btow
      1  0dd4		       a9 00		      lda	#$00
      2  0dd6		       48		      pha
      0  0dd7					      mulw
      1  0dd7					      IF	!FPULL
      2  0dd7		       68		      pla
      3  0dd8		       85 fc		      sta	R1
      4  0dda		       68		      pla
      5  0ddb		       85 fb		      sta	R0
      6  0ddd				  -	      ELSE
      7  0ddd				  -	      sta	R0
      8  0ddd				  -	      sty	R1
      9  0ddd					      ENDIF
     10  0ddd		       68		      pla
     11  0dde		       85 fe		      sta	R3
     12  0de0		       68		      pla
     13  0de1		       85 fd		      sta	R2
     14  0de3		       20 0d 08 	      jsr	NUCL_SMUL16
     15  0de6					      IF	!FPUSH
     16  0de6		       a5 fb		      lda	R0
     17  0de8		       48		      pha
     18  0de9		       a5 fc		      lda	R1
     19  0deb		       48		      pha
     20  0dec				  -	      ELSE
     21  0dec				  -	      lda	R0
     22  0dec				  -	      ldy	R1
     23  0dec					      ENDIF
      0  0dec					      addw
      1  0dec		       ba		      tsx
      2  0ded		       bd 02 01 	      lda.wx	stack+2
      3  0df0		       18		      clc
      4  0df1		       7d 04 01 	      adc.wx	stack+4
      5  0df4		       9d 04 01 	      sta.wx	stack+4
      6  0df7		       68		      pla
      7  0df8		       7d 03 01 	      adc.wx	stack+3
      8  0dfb		       9d 03 01 	      sta.wx	stack+3
      9  0dfe		       68		      pla
      0  0dff					      pbvar	_makecharset.i
      0  0dff					      pbyte	_makecharset.i
      1  0dff		       ad 5c 10 	      lda	_makecharset.i
      2  0e02					      IF	!FPUSH
      3  0e02		       48		      pha
      4  0e03					      ENDIF
      0  0e03					      btow
      1  0e03		       a9 00		      lda	#$00
      2  0e05		       48		      pha
      0  0e06					      addw
      1  0e06		       ba		      tsx
      2  0e07		       bd 02 01 	      lda.wx	stack+2
      3  0e0a		       18		      clc
      4  0e0b		       7d 04 01 	      adc.wx	stack+4
      5  0e0e		       9d 04 01 	      sta.wx	stack+4
      6  0e11		       68		      pla
      7  0e12		       7d 03 01 	      adc.wx	stack+3
      8  0e15		       9d 03 01 	      sta.wx	stack+3
      9  0e18		       68		      pla
      0  0e19					      pokeb
      1  0e19					      IF	!FPULL
      2  0e19		       68		      pla
      3  0e1a		       8d 24 0e 	      sta	.selfmod_code+2
      4  0e1d		       68		      pla
      5  0e1e		       8d 23 0e 	      sta	.selfmod_code+1
      6  0e21				  -	      ELSE
      7  0e21				  -	      sta	.selfmod_code+1
      8  0e21				  -	      sty	.selfmod_code+2
      9  0e21					      ENDIF
     10  0e21		       68		      pla
     11  0e22				   .selfmod_code
     12  0e22		       8d 00 00 	      sta.w	$0000
      0  0e25					      nextb	_makecharset.i
      1  0e25
      2  0e25		       ee 5c 10 	      inc	_makecharset.i
      3  0e28
      4  0e28		       f0 15		      beq	.end
      5  0e2a				   .skip
      6  0e2a
      7  0e2a		       68		      pla
      8  0e2b		       8d 3e 0e 	      sta	.selfmod_code+2
      9  0e2e		       68		      pla
     10  0e2f		       8d 3d 0e 	      sta	.selfmod_code+1
     11  0e32
     12  0e32		       68		      pla
     13  0e33		       cd 5c 10 	      cmp	_makecharset.i
     14  0e36		       b0 03		      bcs	.jump_back
     15  0e38		       4c 3f 0e 	      jmp	.end
     16  0e3b				   .jump_back
     17  0e3b
     18  0e3b		       48		      pha
     19  0e3c				   .selfmod_code
     20  0e3c		       4c 00 00 	      jmp	$0000
     21  0e3f				   .end
      0  0e3f					      incb	_makecharset.c
      1  0e3f		       ee 5a 10 	      inc	_makecharset.c
      0  0e42					      pbvar	_makecharset.c
      0  0e42					      pbyte	_makecharset.c
      1  0e42		       ad 5a 10 	      lda	_makecharset.c
      2  0e45					      IF	!FPUSH
      3  0e45		       48		      pha
      4  0e46					      ENDIF
   2944  0e46				   FPUSH      SET	1
      0  0e46					      pbyte	#0
      1  0e46		       a9 00		      lda	#0
      2  0e48				  -	      IF	!FPUSH
      3  0e48				  -	      pha
      4  0e48					      ENDIF
   2946  0e48				   FPULL      SET	1
   2947  0e48				   FPUSH      SET	0
      0  0e48					      cmpbgt
      1  0e48				  -	      IF	!FPULL
      2  0e48				  -	      pla
      3  0e48					      ENDIF
      4  0e48		       85 fc		      sta	R1
      5  0e4a		       68		      pla
      6  0e4b		       c5 fc		      cmp	R1
      7  0e4d		       90 08		      bcc	.phf
      8  0e4f		       f0 06		      beq	.phf
      0  0e51					      pone
      1  0e51		       a9 01		      lda	#$01
      2  0e53					      IF	!FPUSH
      3  0e53		       48		      pha
      4  0e54					      ENDIF
     10  0e54					      IF	!FPUSH
     11  0e54		       4c 5a 0e 	      jmp	*+6
     12  0e57				  -	      ELSE
     13  0e57				  -	      jmp	*+5
     14  0e57					      ENDIF
      0  0e57				   .phf       pzero
      1  0e57		       a9 00		      lda	#$00
      2  0e59					      IF	!FPUSH
      3  0e59		       48		      pha
      4  0e5a					      ENDIF
   2949  0e5a		       68		      pla
   2950  0e5b		       d0 03		      bne	*+5
   2951  0e5d		       4c 63 0e 	      jmp	_J2
   2952  0e60		       4c 38 0d 	      jmp	_Lmakecharset.loop
   2953  0e63				   _J2
   2954  0e63		       60		      rts
   2955  0e64				   _Pmakecharset_end
   2956  0e64							; Inline ASM start
   2957  0e64
   2958  0e64		       78		      sei
   2959  0e65							; Inline ASM end
   2960  0e65				   FPULL      SET	0
      0  0e65					      pbyte	#6
      1  0e65		       a9 06		      lda	#6
      2  0e67					      IF	!FPUSH
      3  0e67		       48		      pha
      4  0e68					      ENDIF
   2962  0e68				   FPUSH      SET	1
      0  0e68					      pword	#53280
      1  0e68				  -	      IF	!FPUSH
      2  0e68				  -	      lda	#<#53280
      3  0e68				  -	      pha
      4  0e68				  -	      lda	#>#53280
      5  0e68				  -	      pha
      6  0e68					      ELSE
      7  0e68		       a9 20		      lda	#<#53280
      8  0e6a		       a0 d0		      ldy	#>#53280
      9  0e6c					      ENDIF
   2964  0e6c				   FPULL      SET	1
   2965  0e6c				   FPUSH      SET	0
      0  0e6c					      pokeb
      1  0e6c				  -	      IF	!FPULL
      2  0e6c				  -	      pla
      3  0e6c				  -	      sta	.selfmod_code+2
      4  0e6c				  -	      pla
      5  0e6c				  -	      sta	.selfmod_code+1
      6  0e6c					      ELSE
      7  0e6c		       8d 74 0e 	      sta	.selfmod_code+1
      8  0e6f		       8c 75 0e 	      sty	.selfmod_code+2
      9  0e72					      ENDIF
     10  0e72		       68		      pla
     11  0e73				   .selfmod_code
     12  0e73		       8d 00 00 	      sta.w	$0000
   2967  0e73				   FPULL      SET	0
      0  0e76					      pbyte	#6
      1  0e76		       a9 06		      lda	#6
      2  0e78					      IF	!FPUSH
      3  0e78		       48		      pha
      4  0e79					      ENDIF
   2969  0e79				   FPUSH      SET	1
      0  0e79					      pword	#53281
      1  0e79				  -	      IF	!FPUSH
      2  0e79				  -	      lda	#<#53281
      3  0e79				  -	      pha
      4  0e79				  -	      lda	#>#53281
      5  0e79				  -	      pha
      6  0e79					      ELSE
      7  0e79		       a9 21		      lda	#<#53281
      8  0e7b		       a0 d0		      ldy	#>#53281
      9  0e7d					      ENDIF
   2971  0e7d				   FPULL      SET	1
   2972  0e7d				   FPUSH      SET	0
      0  0e7d					      pokeb
      1  0e7d				  -	      IF	!FPULL
      2  0e7d				  -	      pla
      3  0e7d				  -	      sta	.selfmod_code+2
      4  0e7d				  -	      pla
      5  0e7d				  -	      sta	.selfmod_code+1
      6  0e7d					      ELSE
      7  0e7d		       8d 85 0e 	      sta	.selfmod_code+1
      8  0e80		       8c 86 0e 	      sty	.selfmod_code+2
      9  0e83					      ENDIF
     10  0e83		       68		      pla
     11  0e84				   .selfmod_code
     12  0e84		       8d 00 00 	      sta.w	$0000
   2974  0e84				   FPULL      SET	0
      0  0e87					      pbyte	#0
      1  0e87		       a9 00		      lda	#0
      2  0e89					      IF	!FPUSH
      3  0e89		       48		      pha
      4  0e8a					      ENDIF
      0  0e8a					      pword	#1000
      1  0e8a					      IF	!FPUSH
      2  0e8a		       a9 e8		      lda	#<#1000
      3  0e8c		       48		      pha
      4  0e8d		       a9 03		      lda	#>#1000
      5  0e8f		       48		      pha
      6  0e90				  -	      ELSE
      7  0e90				  -	      lda	#<#1000
      8  0e90				  -	      ldy	#>#1000
      9  0e90					      ENDIF
      0  0e90					      pword	#55296
      1  0e90					      IF	!FPUSH
      2  0e90		       a9 00		      lda	#<#55296
      3  0e92		       48		      pha
      4  0e93		       a9 d8		      lda	#>#55296
      5  0e95		       48		      pha
      6  0e96				  -	      ELSE
      7  0e96				  -	      lda	#<#55296
      8  0e96				  -	      ldy	#>#55296
      9  0e96					      ENDIF
      0  0e96					      memset
      1  0e96					      IF	!FPULL
      2  0e96		       68		      pla
      3  0e97		       85 fc		      sta	R1
      4  0e99		       68		      pla
      5  0e9a		       85 fb		      sta	R0
      6  0e9c				  -	      ELSE
      7  0e9c				  -	      sta	R0
      8  0e9c				  -	      sty	R1
      9  0e9c					      ENDIF
     10  0e9c		       68		      pla
     11  0e9d		       85 fe		      sta	R3
     12  0e9f		       68		      pla
     13  0ea0		       85 fd		      sta	R2
     14  0ea2		       68		      pla
     15  0ea3		       20 de 0a 	      jsr	mem_memset
   2979  0ea3				   FPUSH      SET	1
      0  0ea6					      pword	#8192
      1  0ea6				  -	      IF	!FPUSH
      2  0ea6				  -	      lda	#<#8192
      3  0ea6				  -	      pha
      4  0ea6				  -	      lda	#>#8192
      5  0ea6				  -	      pha
      6  0ea6					      ELSE
      7  0ea6		       a9 00		      lda	#<#8192
      8  0ea8		       a0 20		      ldy	#>#8192
      9  0eaa					      ENDIF
   2981  0eaa				   FPULL      SET	1
   2982  0eaa				   FPUSH      SET	0
      0  0eaa					      plw2var	_makecharset.address
      1  0eaa				  -	      IF	!FPULL
      2  0eaa				  -	      pla
      3  0eaa				  -	      sta	_makecharset.address+1
      4  0eaa				  -	      pla
      5  0eaa				  -	      sta	_makecharset.address
      6  0eaa					      ELSE
      7  0eaa		       8d 58 10 	      sta	_makecharset.address
      8  0ead		       8c 59 10 	      sty	_makecharset.address+1
      9  0eb0					      ENDIF
   2984  0eb0		       20 b5 0c 	      jsr	_Pmakecharset
   2985  0eb3				   _Lloop
   2986  0eb3				   FPULL      SET	0
   2987  0eb3				   FPUSH      SET	1
      0  0eb3					      pword	#10240
      1  0eb3				  -	      IF	!FPUSH
      2  0eb3				  -	      lda	#<#10240
      3  0eb3				  -	      pha
      4  0eb3				  -	      lda	#>#10240
      5  0eb3				  -	      pha
      6  0eb3					      ELSE
      7  0eb3		       a9 00		      lda	#<#10240
      8  0eb5		       a0 28		      ldy	#>#10240
      9  0eb7					      ENDIF
   2989  0eb7				   FPULL      SET	1
   2990  0eb7				   FPUSH      SET	0
      0  0eb7					      plw2var	_doplasma.screen
      1  0eb7				  -	      IF	!FPULL
      2  0eb7				  -	      pla
      3  0eb7				  -	      sta	_doplasma.screen+1
      4  0eb7				  -	      pla
      5  0eb7				  -	      sta	_doplasma.screen
      6  0eb7					      ELSE
      7  0eb7		       8d 13 10 	      sta	_doplasma.screen
      8  0eba		       8c 14 10 	      sty	_doplasma.screen+1
      9  0ebd					      ENDIF
   2992  0ebd		       20 6b 0b 	      jsr	_Pdoplasma
   2993  0ebd				   FPULL      SET	0
      0  0ec0					      pbyte	#168
      1  0ec0		       a9 a8		      lda	#168
      2  0ec2					      IF	!FPUSH
      3  0ec2		       48		      pha
      4  0ec3					      ENDIF
   2995  0ec3				   FPUSH      SET	1
      0  0ec3					      pword	#53272
      1  0ec3				  -	      IF	!FPUSH
      2  0ec3				  -	      lda	#<#53272
      3  0ec3				  -	      pha
      4  0ec3				  -	      lda	#>#53272
      5  0ec3				  -	      pha
      6  0ec3					      ELSE
      7  0ec3		       a9 18		      lda	#<#53272
      8  0ec5		       a0 d0		      ldy	#>#53272
      9  0ec7					      ENDIF
   2997  0ec7				   FPULL      SET	1
   2998  0ec7				   FPUSH      SET	0
      0  0ec7					      pokeb
      1  0ec7				  -	      IF	!FPULL
      2  0ec7				  -	      pla
      3  0ec7				  -	      sta	.selfmod_code+2
      4  0ec7				  -	      pla
      5  0ec7				  -	      sta	.selfmod_code+1
      6  0ec7					      ELSE
      7  0ec7		       8d cf 0e 	      sta	.selfmod_code+1
      8  0eca		       8c d0 0e 	      sty	.selfmod_code+2
      9  0ecd					      ENDIF
     10  0ecd		       68		      pla
     11  0ece				   .selfmod_code
     12  0ece		       8d 00 00 	      sta.w	$0000
   3000  0ece				   FPULL      SET	0
   3001  0ece				   FPUSH      SET	1
      0  0ed1					      pword	#11264
      1  0ed1				  -	      IF	!FPUSH
      2  0ed1				  -	      lda	#<#11264
      3  0ed1				  -	      pha
      4  0ed1				  -	      lda	#>#11264
      5  0ed1				  -	      pha
      6  0ed1					      ELSE
      7  0ed1		       a9 00		      lda	#<#11264
      8  0ed3		       a0 2c		      ldy	#>#11264
      9  0ed5					      ENDIF
   3003  0ed5				   FPULL      SET	1
   3004  0ed5				   FPUSH      SET	0
      0  0ed5					      plw2var	_doplasma.screen
      1  0ed5				  -	      IF	!FPULL
      2  0ed5				  -	      pla
      3  0ed5				  -	      sta	_doplasma.screen+1
      4  0ed5				  -	      pla
      5  0ed5				  -	      sta	_doplasma.screen
      6  0ed5					      ELSE
      7  0ed5		       8d 13 10 	      sta	_doplasma.screen
      8  0ed8		       8c 14 10 	      sty	_doplasma.screen+1
      9  0edb					      ENDIF
   3006  0edb		       20 6b 0b 	      jsr	_Pdoplasma
   3007  0edb				   FPULL      SET	0
      0  0ede					      pbyte	#184
      1  0ede		       a9 b8		      lda	#184
      2  0ee0					      IF	!FPUSH
      3  0ee0		       48		      pha
      4  0ee1					      ENDIF
   3009  0ee1				   FPUSH      SET	1
      0  0ee1					      pword	#53272
      1  0ee1				  -	      IF	!FPUSH
      2  0ee1				  -	      lda	#<#53272
      3  0ee1				  -	      pha
      4  0ee1				  -	      lda	#>#53272
      5  0ee1				  -	      pha
      6  0ee1					      ELSE
      7  0ee1		       a9 18		      lda	#<#53272
      8  0ee3		       a0 d0		      ldy	#>#53272
      9  0ee5					      ENDIF
   3011  0ee5				   FPULL      SET	1
   3012  0ee5				   FPUSH      SET	0
      0  0ee5					      pokeb
      1  0ee5				  -	      IF	!FPULL
      2  0ee5				  -	      pla
      3  0ee5				  -	      sta	.selfmod_code+2
      4  0ee5				  -	      pla
      5  0ee5				  -	      sta	.selfmod_code+1
      6  0ee5					      ELSE
      7  0ee5		       8d ed 0e 	      sta	.selfmod_code+1
      8  0ee8		       8c ee 0e 	      sty	.selfmod_code+2
      9  0eeb					      ENDIF
     10  0eeb		       68		      pla
     11  0eec				   .selfmod_code
     12  0eec		       8d 00 00 	      sta.w	$0000
   3014  0eef		       4c b3 0e 	      jmp	_Lloop
   3015  0ef2				   prg_end
      0  0ef2					      halt
      0  0ef2					      basicin
      1  0ef2		       a5 01		      lda	$01
      2  0ef4		       09 01		      ora	#%00000001
      3  0ef6		       85 01		      sta	$01
      2  0ef8		       ae 85 09 	      ldx	RESERVED_STACK_POINTER
      3  0efb		       9a		      txs
      4  0efc		       60		      rts
 Code        : $b44 - $efc
   3017  0efc					      ECHO	"Code	      :",prg_start,"-", *-1
   3018  0efd				   data_start
   3019  0efd		       01 02 04 08*_bittab    DC.B	#1, #2, #4, #8, #16, #32, #64, #128
   3020  0f05		       7f 82 85 88*_sntable   DC.B	#127, #130, #133, #136, #139, #143, #146, #149, #152, #155, #158, #161, #164, #167, #170, #173
   3021  0f15		       b0 b3 b6 b8*	      DC.B	#176, #179, #182, #184, #187, #190, #193, #195, #198, #200, #203, #205, #208, #210, #213, #215
   3022  0f25		       d9 db dd e0*	      DC.B	#217, #219, #221, #224, #226, #228, #229, #231, #233, #235, #236, #238, #239, #241, #242, #244
   3023  0f35		       f5 f6 f7 f8*	      DC.B	#245, #246, #247, #248, #249, #250, #251, #251, #252, #253, #253, #254, #254, #254, #254, #254
   3024  0f45		       ff fe fe fe*	      DC.B	#255, #254, #254, #254, #254, #254, #253, #253, #252, #251, #251, #250, #249, #248, #247, #246
   3025  0f55		       f5 f4 f2 f1*	      DC.B	#245, #244, #242, #241, #239, #238, #236, #235, #233, #231, #229, #228, #226, #224, #221, #219
   3026  0f65		       d9 d7 d5 d2*	      DC.B	#217, #215, #213, #210, #208, #205, #203, #200, #198, #195, #193, #190, #187, #184, #182, #179
   3027  0f75		       b0 ad aa a7*	      DC.B	#176, #173, #170, #167, #164, #161, #158, #155, #152, #149, #146, #143, #139, #136, #133, #130
   3028  0f85		       7f 7c 79 76*	      DC.B	#127, #124, #121, #118, #115, #111, #108, #105, #102, #99, #96, #93, #90, #87, #84, #81
   3029  0f95		       4e 4b 48 46*	      DC.B	#78, #75, #72, #70, #67, #64, #61, #59, #56, #54, #51, #49, #46, #44, #41, #39
   3030  0fa5		       25 23 21 1e*	      DC.B	#37, #35, #33, #30, #28, #26, #25, #23, #21, #19, #18, #16, #15, #13, #12, #10
   3031  0fb5		       09 08 07 06*	      DC.B	#9, #8, #7, #6, #5, #4, #3, #3, #2, #1, #1, #0, #0, #0, #0, #0
   3032  0fc5		       00 00 00 00*	      DC.B	#0, #0, #0, #0, #0, #0, #1, #1, #2, #3, #3, #4, #5, #6, #7, #8
   3033  0fd5		       09 0a 0c 0d*	      DC.B	#9, #10, #12, #13, #15, #16, #18, #19, #21, #23, #25, #26, #28, #30, #33, #35
   3034  0fe5		       25 27 29 2c*	      DC.B	#37, #39, #41, #44, #46, #49, #51, #54, #56, #59, #61, #64, #67, #70, #72, #75
   3035  0ff5		       4e 51 54 57*	      DC.B	#78, #81, #84, #87, #90, #93, #96, #99, #102, #105, #108, #111, #115, #118, #121, #124
   3036  1005		       93 00	   _S1	      HEX	93 00
   3037  1007		       0c 0f 01 04*_S2	      HEX	0C 0F 01 04 09 0E 07 2E 2E 2E 00
   3038  1012				   data_end
 Data        : $efd - $1011
   3039  1012					      ECHO	"Data	      :",data_start,"-", *-1
   3040  1012							;--------------
   3041 U105f ????				      SEG.U	variables
   3042 U1013					      ORG	data_end+1
   3043 U1013		       00 02	   _c1A       EQU	$2
   3044 U1013		       00 03	   _c1B       EQU	$3
   3045 U1013		       00 04	   _c2A       EQU	$4
   3046 U1013		       00 05	   _c2B       EQU	$5
   3047 U1013		       00 00	   _doplasma.screen DS.B	2
   3048 U1015		       00 00 00 00*_doplasma.xbuf DS.B	40
   3049 U103d		       00 00 00 00*_doplasma.ybuf DS.B	25
   3050 U103d		       00 06	   _doplasma.i EQU	$6
   3051 U103d		       00 07	   _doplasma.x EQU	$7
   3052 U103d		       00 08	   _doplasma.y EQU	$8
   3053 U103d		       00 09	   _doplasma.c1a EQU	$9
   3054 U103d		       00 0a	   _doplasma.c1b EQU	$A
   3055 U103d		       00 0b	   _doplasma.c2a EQU	$B
   3056 U103d		       00 0c	   _doplasma.c2b EQU	$C
   3057 U1056		       00 00	   _doplasma.cursor DS.B	2
   3058 U1058		       00 00	   _makecharset.address DS.B	2
   3059 U105a		       00	   _makecharset.c DS.B	1
   3060 U105b		       00	   _makecharset.s DS.B	1
   3061 U105c		       00	   _makecharset.i DS.B	1
   3062 U105d		       00	   _makecharset.b DS.B	1
   3063 U105e		       00	   _makecharset.ii DS.B	1
 Variables*  : $1012 - $105f
   3064 U105e					      ECHO	"Variables*  :",data_end,"-", *
 ===================
   3065 U105e					      ECHO	"==================="
 *: uninitialized segment
   3066 U105e					      ECHO	"*: uninitialized segment"
   3067 U105f
